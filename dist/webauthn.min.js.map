{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/authenticators.ts", "../src/parsers.ts", "../src/webauthn.ts"],
  "sourcesContent": ["/********************************\r\n     Encoding/Decoding Utils\r\n********************************/\r\n\r\nexport function toBuffer(txt :string) :ArrayBuffer {\r\n    return Uint8Array.from(txt, c => c.charCodeAt(0)).buffer\r\n}\r\n\r\nexport function parseBuffer(buffer :ArrayBuffer) :string {\r\n    return String.fromCharCode(...new Uint8Array(buffer))\r\n}\r\n\r\n\r\nexport function isBase64url(txt :string) :boolean {\r\n    return txt.match(/^[a-zA-Z0-9\\-_]+=*$/) !== null\r\n}\r\n\r\nexport function toBase64url(buffer :ArrayBuffer) :string {\r\n    const txt = btoa(parseBuffer(buffer)) // base64\r\n    return txt.replaceAll('+', '-').replaceAll('/', '_')\r\n}\r\n\r\nexport function parseBase64url(txt :string) :ArrayBuffer {\r\n    txt = txt.replaceAll('-', '+').replaceAll('_', '/') // base64url -> base64\r\n    return toBuffer(atob(txt))\r\n}\r\n\r\n\r\nexport async function sha256(buffer :ArrayBuffer) :Promise<ArrayBuffer> {\r\n    return await window.crypto.subtle.digest('SHA-256', buffer)\r\n}\r\n\r\nexport function bufferToHex (buffer :ArrayBuffer) :string {\r\n    return [...new Uint8Array (buffer)]\r\n        .map (b => b.toString (16).padStart (2, \"0\"))\r\n        .join (\"\");\r\n}\r\n\r\n\r\nexport function concatenateBuffers(buffer1 :ArrayBuffer, buffer2  :ArrayBuffer) {\r\n    var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\r\n    tmp.set(new Uint8Array(buffer1), 0);\r\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\r\n    return tmp;\r\n  };", "import authenticatorMetadata from './authenticatorMetadata.json'\r\nimport * as utils from './utils'\r\n\r\n\r\nexport function parseAuthData(authData :ArrayBuffer) {\r\n    console.debug(authData)\r\n    let flags = new DataView(authData.slice(32,33)).getUint8(0)\r\n    console.debug(flags)\r\n\r\n    // https://w3c.github.io/webauthn/#sctn-authenticator-data\r\n    let parsed :any = {\r\n        rpIdHash: utils.toBase64url(authData.slice(0,32)),\r\n            flags: {\r\n                 userPresent: !!(flags & 1),\r\n                 //reserved1: !!(flags & 2),\r\n                 userVerified: !!(flags &  4),\r\n                 backupEligibility: !!(flags & 8),\r\n                 backupState: !!(flags & 16),\r\n                 //reserved2: !!(flags & 32),\r\n                 attestedData: !!(flags & 64),\r\n                 extensionsIncluded: !!(flags & 128)\r\n            },\r\n            counter: new DataView(authData.slice(33,37)).getUint32(0, false),  // Big-Endian!\r\n    }\r\n\r\n    if(authData.byteLength > 37) {\r\n        // registration contains additional data\r\n\r\n        const aaguid = extractAaguid(authData)\r\n        // https://w3c.github.io/webauthn/#attested-credential-data\r\n        //let credentialLength = new DataView(authData.slice(53,55)).getUint16(0, false) // Big-Endian!\r\n        \r\n        parsed = {\r\n            ...parsed,\r\n            aaguid, // bytes 37->53\r\n            name: resolveAuthenticatorName(aaguid)\r\n            // credentialBytes, // bytes 53->55: credential length\r\n            // credentialId: utils.toBase64url(authData.slice(55, 55+credentialLength)),\r\n            //publicKey: until where? ...and it's encoded using a strange format, let's better avoid it\r\n            //extensions: starting where?\r\n        }\r\n    }\r\n\r\n    return parsed\r\n}\r\n\r\nexport function extractAaguid(authData :ArrayBuffer) :string {\r\n    return formatAaguid(authData.slice(37, 53)) // 16 bytes\r\n}\r\n\r\nfunction formatAaguid(buffer :ArrayBuffer) :string {\r\n    let aaguid = utils.bufferToHex(buffer)\r\n    aaguid = aaguid.substring(0,8) + '-' + aaguid.substring(8,12) + '-' + aaguid.substring(12,16) + '-' + aaguid.substring(16,20) + '-' + aaguid.substring(20,32)\r\n    return aaguid // example: \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\"\r\n}\r\n\r\nexport function resolveAuthenticatorName(aaguid :string) :string {\r\n    const aaguidMetadata = updatedAuthenticatorMetadata ?? authenticatorMetadata //await getAaguidMetadata()\r\n    return aaguidMetadata[aaguid]?.name\r\n}\r\n\r\nlet updatedAuthenticatorMetadata :any = null\r\n\r\n// List of AAGUIDs are encoded as JWT here: https://mds.fidoalliance.org/\r\nexport async function updateDevicesMetadata() {\r\n    // this function is rather resource intensive and time consuming\r\n    // therefore, the result is cached in local storage\r\n    const jwt = await (await fetch(\"https://mds.fidoalliance.org\")).text()\r\n\r\n    // the response is a JWT including all AAGUIDs and their metadata\r\n    console.debug(jwt)\r\n\r\n    // let us ignore the JWT verification, since this is solely for descriptive purposes, not signed data\r\n    const payload = jwt.split('.')[1].replaceAll('-', '+').replaceAll('_', '/')\r\n    const json = JSON.parse(atob(payload))\r\n    console.debug(json)\r\n\r\n    let aaguidMetadata :any = {}\r\n    for(const e of json.entries) {\r\n        if(!e.aaguid || !e.metadataStatement)\r\n            continue\r\n\r\n        aaguidMetadata[e.aaguid] = {name: e.metadataStatement.description}\r\n    }\r\n\r\n    console.debug(aaguidMetadata)\r\n    updatedAuthenticatorMetadata = aaguidMetadata\r\n}\r\n", "import * as authenticators from './authenticators'\r\n\r\nconst utf8Decoder = new TextDecoder('utf-8')\r\n\r\nexport function parseClientData(buffer :ArrayBuffer) {\r\n    return JSON.parse(utf8Decoder.decode(buffer))\r\n}\r\n\r\n\r\nexport function parseAuthenticatorData(buffer :ArrayBuffer) {\r\n    return authenticators.parseAuthData(buffer)\r\n}\r\n\r\nexport function parseAttestationData(buffer :ArrayBuffer) {\r\n    return 'Really complex to parse. Good luck with that one!'\r\n}", "import * as utils from './utils'\r\nimport * as parsers from './parsers'\r\n\r\n/**\r\n * Returns whether passwordless authentication is available on this browser/platform or not.\r\n */\r\nexport function isAvailable() :boolean {\r\n    return !!window.PublicKeyCredential\r\n}\r\n\r\n/**\r\n * Returns whether the device itself can be used as authenticator.\r\n */\r\nexport async function isLocalAuthenticator() :Promise<boolean> {\r\n    return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()\r\n}\r\n\r\n\r\n// Used mainly for the playground\r\nexport function parseAuthenticatorData(authData :string) {\r\n    return parsers.parseAuthenticatorData(utils.parseBase64url(authData))\r\n}\r\n\r\ntype AuthType = 'auto' | 'local' | 'extern' | 'both'\r\n\r\nasync function getAuthAttachment(authType :AuthType) :Promise<AuthenticatorAttachment|undefined> {\r\n    if(authType === \"local\")\r\n        return \"platform\";\r\n    if(authType === \"extern\")\r\n        return \"cross-platform\";\r\n    if(authType === \"both\")\r\n        return undefined // The webauthn protocol considers `null` as invalid but `undefined` as \"both\"!\r\n\r\n    // the default case: \"auto\", depending on device capabilities\r\n    try {\r\n        if(await isLocalAuthenticator())\r\n            return \"platform\"\r\n        else\r\n            return \"cross-platform\"\r\n    } catch(e) {\r\n        // might happen due to some security policies\r\n        // see https://w3c.github.io/webauthn/#sctn-isUserVerifyingPlatformAuthenticatorAvailable\r\n        return undefined // The webauthn protocol considers `null` as invalid but `undefined` as \"both\"!\r\n    }\r\n}\r\n\r\n\r\n// TODO: although algo \"-8\" is currently only used optionally by a few security keys, \r\n// it would not harm to support it for the sake of completeness\r\ntype NumAlgo = -7 | -257\r\ntype NamedAlgo = 'RS256' | 'ES256'\r\n\r\nfunction getAlgoName(num :NumAlgo) :NamedAlgo {\r\n    switch(num) {\r\n        case -7: return \"ES256\"\r\n        // case -8 ignored to to its rarity\r\n        case -257: return \"RS256\"\r\n        default: throw new Error(`Unknown algorithm code: ${num}`)\r\n    }\r\n}\r\n\r\n\r\ninterface LoginOptions {\r\n    userVerification ?:UserVerificationRequirement,\r\n    authenticatorType ?:AuthType,\r\n    timeout ?:number,\r\n    debug ?:boolean\r\n} \r\n\r\n\r\ninterface RegisterOptions extends LoginOptions {\r\n    attestation?: boolean\r\n}\r\n\r\n\r\n/**\r\n * Creates a cryptographic key pair, in order to register the public key for later passwordless authentication.\r\n *\r\n * @param {string} username\r\n * @param {string} challenge A server-side randomly generated string.\r\n * @param {Object} [options] Optional parameters.\r\n * @param {number} [options.timeout=60000] Number of milliseconds the user has to respond to the biometric/PIN check.\r\n * @param {'required'|'preferred'|'discouraged'} [options.userVerification='required'] Whether to prompt for biometric/PIN check or not.\r\n * @param {'auto'|'local'|'extern'|'both'}       [options.authenticatorType='auto'] Which device to use as authenticator.\r\n *          'auto': if the local device can be used as authenticator it will be preferred. Otherwise it will prompt for an external device.\r\n *          'local': use the local device (using TouchID, FaceID, Windows Hello or PIN)\r\n *          'extern': use an external device (security key or connected phone)\r\n *          'both': prompt the user to choose between local or external device. The UI and user interaction in this case is platform specific.\r\n * @param {boolean} [attestation=false] If enabled, the device attestation and clientData will be provided as Base64url encoded binary data.\r\n *                                Note that this is not available on some platforms.\r\n */\r\nexport async function register(username :string, challenge :string, options? :RegisterOptions) {\r\n    options = options ?? {}\r\n\r\n    if(!utils.isBase64url(challenge))\r\n        throw new Error('Provided challenge is not properly encoded in Base64url')\r\n\r\n    const creationOptions :PublicKeyCredentialCreationOptions = {\r\n        challenge: utils.parseBase64url(challenge),\r\n        rp: {\r\n            id: window.location.hostname,\r\n            name: window.location.hostname\r\n        },\r\n        user: {\r\n            id: await utils.sha256(new TextEncoder().encode(username)), // ID should not be directly \"identifiable\" for privacy concerns\r\n            name: username,\r\n            displayName: username,\r\n        },\r\n        pubKeyCredParams: [\r\n            {alg: -7, type: \"public-key\"},   // ES256 (Webauthn's default algorithm)\r\n            {alg: -257, type: \"public-key\"}, // RS256 (for Windows Hello and others)\r\n        ],\r\n        timeout: options.timeout ?? 60000,\r\n        authenticatorSelection: {\r\n            userVerification: options.userVerification ?? \"required\", // Webauthn default is \"preferred\"\r\n            authenticatorAttachment: await getAuthAttachment(options.authenticatorType ?? \"auto\"),\r\n        },\r\n        attestation: \"direct\" // options.attestation ? \"direct\" : \"none\"\r\n    }\r\n\r\n    if(options.debug)\r\n        console.debug(creationOptions)\r\n\r\n    const credential = await navigator.credentials.create({publicKey: creationOptions}) as any //PublicKeyCredential\r\n    \r\n    if(options.debug)\r\n        console.debug(credential)\r\n   \r\n    const response = credential.response as any // AuthenticatorAttestationResponse\r\n    \r\n    let registrationResponse :any = {\r\n        username: username,\r\n        credential: {\r\n            id: credential.id,\r\n            publicKey: utils.toBase64url(response.getPublicKey()),\r\n            algorithm: getAlgoName(credential.response.getPublicKeyAlgorithm())\r\n        },\r\n        authenticatorData: utils.toBase64url(response.getAuthenticatorData()),\r\n        clientData: utils.toBase64url(response.clientDataJSON),\r\n        attestationData: options.attestation ? utils.toBase64url(response.attestationObject) : null,\r\n    }\r\n\r\n    if(options.debug) {\r\n        registrationResponse['debug'] = {\r\n            client: parsers.parseClientData(response.clientDataJSON),\r\n            authenticator: parsers.parseAuthenticatorData(response.getAuthenticatorData()),\r\n            attestation: parsers.parseAttestationData(response.attestationObject)\r\n        }\r\n    }\r\n\r\n    return registrationResponse\r\n}\r\n\r\n\r\nasync function getTransports(authType :AuthType) :Promise<AuthenticatorTransport[]> {\r\n    if(authType === \"local\")\r\n        return ['internal']\r\n    if(authType === \"extern\")\r\n        return ['usb', 'ble', 'nfc']\r\n    if(authType === \"both\")\r\n        return ['internal', 'usb', 'ble', 'nfc']\r\n\r\n    // the default case: \"auto\", depending on device capabilities\r\n    try {\r\n        if(await isLocalAuthenticator())\r\n            return ['internal']\r\n        else\r\n            return ['usb', 'ble', 'nfc']\r\n    } catch(e) {\r\n        return ['internal', 'usb', 'ble', 'nfc']\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Signs a challenge using one of the provided credentials IDs in order to authenticate the user.\r\n *\r\n * @param {string[]} credentialIds The list of credential IDs that can be used for signing.\r\n * @param {string} challenge A server-side randomly generated string, the base64 encoded version will be signed.\r\n * @param {Object} [options] Optional parameters.\r\n * @param {number} [options.timeout=60000] Number of milliseconds the user has to respond to the biometric/PIN check.\r\n * @param {'required'|'preferred'|'discouraged'} [options.userVerification='required'] Whether to prompt for biometric/PIN check or not.\r\n */\r\nexport async function login(credentialIds :string[], challenge :string, options? :LoginOptions) {\r\n    options = options ?? {}\r\n\r\n    if(!utils.isBase64url(challenge))\r\n        throw new Error('Provided challenge is not properly encoded in Base64url')\r\n\r\n    const transports = await getTransports(options.authenticatorType ?? \"auto\");\r\n\r\n    let authOptions :PublicKeyCredentialRequestOptions = {\r\n        challenge: utils.parseBase64url(challenge),\r\n        rpId: window.location.hostname,\r\n        allowCredentials: credentialIds.map(id => { return {\r\n            id: utils.parseBase64url(id),\r\n            type: 'public-key',\r\n            transports: transports,\r\n        }}),\r\n        userVerification: options.userVerification ?? \"required\",\r\n        timeout: options.timeout ?? 60000,\r\n    }\r\n\r\n    if(options.debug)\r\n        console.debug(authOptions)\r\n\r\n    let auth = await navigator.credentials.get({publicKey: authOptions}) as PublicKeyCredential\r\n    \r\n    if(options.debug)\r\n        console.debug(auth)\r\n\r\n    const response = auth.response as AuthenticatorAssertionResponse\r\n    \r\n    const loginResult :any = {\r\n        credentialId: auth.id,\r\n        //userHash: utils.toBase64url(response.userHandle), // unreliable, optional for authenticators\r\n        authenticatorData: utils.toBase64url(response.authenticatorData),\r\n        clientData: utils.toBase64url(response.clientDataJSON),\r\n        signature: utils.toBase64url(response.signature),\r\n    }\r\n\r\n    if(options.debug) {\r\n        loginResult['debug'] = {\r\n            client: parsers.parseClientData(response.clientDataJSON),\r\n            authenticator: parsers.parseAuthenticatorData(response.authenticatorData),\r\n        }\r\n    }\r\n\r\n    return loginResult\r\n}\r\n\r\n\r\nexport function parseClientBase64(txt :string) {\r\n    return parsers.parseClientData( utils.parseBase64url(txt) )\r\n}\r\n\r\n\r\nexport function parseAuthenticatorBase64(txt :string) {\r\n    return parsers.parseAuthenticatorData( utils.parseBase64url(txt) )\r\n}\r\n\r\n\r\n\r\n\r\ntype VerifyParams = {\r\n    algorithm :NamedAlgo,\r\n    publicKey :string, // Base64url encoded\r\n    authenticatorData :string, // Base64url encoded\r\n    clientData :string, // Base64url encoded\r\n    signature :string, // Base64url encoded\r\n}\r\n\r\n\r\nfunction getAlgoParams(algorithm :NamedAlgo) :any {\r\n    switch (algorithm) {\r\n        case 'RS256':\r\n            return {\r\n                name:'RSASSA-PKCS1-v1_5', \r\n                hash:'SHA-256'\r\n            };\r\n        case 'ES256':\r\n            return {\r\n                name: 'ECDSA',\r\n                namedCurve: 'P-256',\r\n                hash: 'SHA-256',\r\n            };\r\n        default:\r\n            throw new Error(`Unknown or unsupported crypto algorithm: ${algorithm}. Only 'RS256' and 'ES256' are supported.`)\r\n    }\r\n}\r\n\r\ntype AlgoParams = AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm\r\n\r\nasync function parseCryptoKey(algoParams :AlgoParams, publicKey :string) :Promise<CryptoKey> {\r\n    const buffer = utils.parseBase64url(publicKey)\r\n    return crypto.subtle.importKey('spki', buffer, algoParams, false, ['verify'])\r\n}\r\n\r\nasync function verifySignature(algoParams :AlgoParams, cryptoKey :CryptoKey, signature :string, payload :ArrayBuffer) :Promise<boolean> {\r\n    const signatureBuffer = utils.parseBase64url(signature)\r\n    return crypto.subtle.verify(algoParams, cryptoKey, signatureBuffer, payload)\r\n}\r\n\r\n// https://w3c.github.io/webauthn/#sctn-verifying-assertion\r\nexport async function verify({algorithm, publicKey, authenticatorData, clientData, signature} :VerifyParams) :Promise<boolean> {\r\n    const algoParams = getAlgoParams(algorithm)\r\n    let cryptoKey = await parseCryptoKey(algoParams, publicKey)\r\n    console.debug(cryptoKey)\r\n\r\n    let clientHash = await utils.sha256( utils.parseBase64url(clientData) );\r\n    console.debug(clientHash)\r\n\r\n    // during \"login\", the authenticatorData is exactly 37 bytes\r\n    let comboBuffer = utils.concatenateBuffers(utils.parseBase64url(authenticatorData), clientHash)\r\n    console.debug(comboBuffer)\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify\r\n    let validity = verifySignature(algoParams, cryptoKey, signature, comboBuffer)\r\n\r\n    return validity\r\n}\r\n"],
  "mappings": "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",
  "names": ["toBuffer", "txt", "c", "parseBuffer", "buffer", "isBase64url", "toBase64url", "parseBase64url", "sha256", "bufferToHex", "b", "concatenateBuffers", "buffer1", "buffer2", "tmp", "parseAuthData", "authData", "flags", "parsed", "toBase64url", "aaguid", "extractAaguid", "resolveAuthenticatorName", "formatAaguid", "buffer", "bufferToHex", "updatedAuthenticatorMetadata", "authenticatorMetadata_default", "utf8Decoder", "parseClientData", "buffer", "parseAuthenticatorData", "parseAuthData", "parseAttestationData", "isAvailable", "isLocalAuthenticator", "parseAuthenticatorData", "authData", "parseBase64url", "getAuthAttachment", "authType", "getAlgoName", "num", "register", "username", "challenge", "options", "isBase64url", "creationOptions", "sha256", "credential", "response", "registrationResponse", "toBase64url", "parseClientData", "parseAttestationData", "getTransports", "login", "credentialIds", "transports", "authOptions", "id", "auth", "loginResult", "parseClientBase64", "txt", "parseAuthenticatorBase64", "getAlgoParams", "algorithm", "parseCryptoKey", "algoParams", "publicKey", "buffer", "verifySignature", "cryptoKey", "signature", "payload", "signatureBuffer", "verify", "authenticatorData", "clientData", "clientHash", "comboBuffer", "concatenateBuffers"]
}
